import * as fs from "fs";
import * as path from "path";
import * as jsYaml from "js-yaml";
import * as fg from "fast-glob";
import * as tsNode from "ts-node";
import { Workflow } from "../lib";

export const DO_NOT_MODIFY_COMMENT = [
  "# ------------DO-NOT-MODIFY-THIS-FILE------------",
  "# This file was automatically generated by github-actions-workflow-ts.",
  "# DO NOT MODIFY IT BY HAND. Instead, modify the source *.wac.ts file(s)",
  '# and run "generate-workflow-files build" (or "gwf build") to regenerate this file.',
  '# For more information, run "generate-workflow-files --help".',
  "# ------------DO-NOT-MODIFY-THIS-FILE------------",
].join("\n");

let tsNodeRegistered = false;

export const relativePath = (p: string): string =>
  path.relative(process.cwd(), p);

export const registerTsNode = (options = {}): void => {
  if (tsNodeRegistered) return;

  tsNode.register({ ...options });
  tsNodeRegistered = true;
};

export const getWorkflowFilePaths = (): string[] | undefined => {
  const workflowFilesPaths = fg.sync(`${process.cwd()}/**/*.wac.ts`, {
    onlyFiles: true,
    dot: true,
  });

  if (!workflowFilesPaths || !workflowFilesPaths.length) {
    console.log(
      "[github-actions-workflow-ts] No workflow files found. Please create at least one *.wac.ts file in your project",
    );

    return;
  }

  console.log(
    "[github-actions-workflow-ts] Detected following workflow files:\n",
    workflowFilesPaths.map((item) => `-> ${relativePath(item)}`).join("\n"),
  );

  return workflowFilesPaths;
};

export const writeWorkflowJSONToYamlFiles = (
  workflowJSON: Record<string, Workflow>,
  argv: Record<string, unknown>,
): number => {
  let workflowCount: number = 0;

  for (const workflowName in workflowJSON) {
    const workflowYaml = jsYaml.dump(workflowJSON[workflowName].workflow, {
      noRefs: !argv["refs"],
    });

    const yamlWorkflowPath = path.join(
      ".github",
      "workflows",
      `${workflowJSON[workflowName].filename}.yml`,
    );

    console.log(
      `[github-actions-workflow-ts] Writing to ${relativePath(
        yamlWorkflowPath,
      )}:`,
    );

    fs.writeFileSync(
      yamlWorkflowPath,
      [DO_NOT_MODIFY_COMMENT, workflowYaml].join("\n"),
    );

    workflowCount++;
  }

  return workflowCount;
};

export const generateWorkflowFiles = async (
  argv: Record<string, unknown>,
): Promise<void> => {
  const workflowFilePaths = getWorkflowFilePaths() || [];
  let workflowCount = 0;

  for (const idx in workflowFilePaths) {
    workflowCount += writeWorkflowJSONToYamlFiles(
      await import(workflowFilePaths[idx]),
      argv,
    );
  }

  console.log(
    `[github-actions-workflow-ts] Successfully generated ${workflowCount} workflow file(s)`,
  );
};
